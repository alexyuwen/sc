// Companion Code 12.1
// A 30-minute Ambient Live Coding Set

// The format of this Companion Code is a bit different from the others. In a live coding setting, code is written, rewritten, modified, and deleted over time. A text file is essentially a snapshot in time and doesn't properly convey the "flow" of how the code evolves. Text files generated by the History class, however, come close to an authentic recreation of a past performance.

// In preparing this companion code module, I recorded a spontaneous 30-minute ambient-style live coding set, capturing the entire performance as a screen video and also as a History file, saved in the "compile string" and "story" formats.

// By loading and playing back the compile string history, each code evaluation will appear in the post window in real-time, and SC will behave as if I were performing it live on your computer. The history file in story format is interactive, like a normal SC file, allowing you to step through each of my code evaluations yourself, with the option to edit them in the process. Keep in mind the story format is verbose â€” it includes the entirety of every evaulation, even those that only involved a minor change from a previous evaluation.

// The point of this session is to demonstrate what an actual performance might look and sound like, and aims to prove that you don't need to cook up a gigantic amount of code, have super-fast typing skills, or intimately know every feature of JITLib, in order to produce satisfying results. A small handful of generative modules and effects, coupled with timely, musically-sensitive tweaks, can take you quite far.

// True to the spirit of live coding, this was a live performance, with minimal preparation, and the recordings are completely unedited (as opposed to something artificially constructed using video editing post-production techniques). Note that there's a gap of silence at the beginning, about 45 seconds long, in which I run some setup code and type out the first NodeProxy source. The recording includes a few mistakes, a few posted warnings, and in retrospect, I might have made made a few musical choices differently. But, fussing over the details is not what live coding is all about; it's about learning from your missteps, improving your craft, and always moving forward.

(
~path = PathName(thisProcess.nowExecutingPath).parentPath ++ "historyCS.scd";
History.loadCS(~path);
History.play;
)